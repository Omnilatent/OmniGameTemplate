name: Unity Actions

on:
  pull_request:
    branches:
      - main
      - develop
      - feature/ci
  push:
    branches:
      - master
      - main
      - develop
      - feature/ci
    tags:
      - 'releases/**'
      - 'v*'

env:
  AWS_ENDPOINT_CDN: ${{ secrets.AWS_ENDPOINT_CDN }}
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  PROJECT_PATH: .
  ANDROID_APP_BUNDLE: true
  DISCORD_WEBHOOK : ${{ secrets.DISCORD_WEBHOOK }}
  REPO_NAME: ${{ github.event.repository.name }}
  REPO_URL: ${{ github.event.repository.url }}
  BRANCH_NAME: ${{ github.ref_name }}
  USER_URL: ${{ github.event.sender.html_url }}
  COMMIT_MESSAGE: ${{ github.event.commits[0].message }}
  COMMIT_HASH: ${{ github.event.head_commit.id }}
  COMMIT_URL: ${{ github.event.head_commit.url }}
  COMMIT_USER: ${{ github.event.sender.login }}
  COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
  COMMIT_COMPARE: ${{ github.event.compare }}
  USER_AVATAR: ${{ github.event.sender.avatar_url }}
  ORG_AVATAR: ${{ github.event.organization.avatar_url }}
  ORG_URL: ${{ github.event.organization.url }}
  ORG_NAME: ${{ github.event.organization.login }}
  ANDROID_KEYSTORE_LINK: ${{ secrets.ANDROID_KEYSTORE_LINK }}

jobs:
  check_unity_license:
    runs-on: self-hosted
    name: check if UNITY_LICENSE is set in github secrets ❓
    outputs:
      is_unity_license_set: ${{ steps.check_unity_license_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done 🚧
        id: check_unity_license_job
        run: |
          echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
          echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"
  activation:
    runs-on: ubuntu-latest
    needs: [check_unity_license]
    if: needs.check_unity_license.outputs.is_unity_license_set == 'false'
    name: Request activation file 🔑
    steps:
      - name: Request manual activation file 🔍
        id: getManualLicenseFile
        uses: game-ci/unity-request-activation-file@v2
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact 📚
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}
  show-activation-guide:
    name:  Manual activation guide 💉
    needs: [activation]
    if: needs.check_unity_license.outputs.is_unity_license_set == 'false'
    uses: ./.github/workflows/manual_activation_guide.yml

  notify_new_commit:
    name: Notify to discord 🐔
    runs-on: self-hosted
    steps:
      - name: Code repo check out 📁
        uses: actions/checkout@v3
      - name: Call script 💫
        id: test
        run: |
          bash .github/scripts/discord_notify.sh

  build_android:
    runs-on: ubuntu-latest
    needs: [check_unity_license]
    if: ${{ (needs.check_unity_license.outputs.is_unity_license_set == 'true') && (github.ref_name == 'develop') }}
    name: Build for Android 🚀
    steps:
      - name: Code repo check out 📁
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: true

      - name: Cache ✨
        uses: actions/cache@v3
        with:
          path: ./Library
          key: Library-${{ env.REPO_NAME }}-iOS
          restore-keys: |
            Library-${{ env.REPO_NAME }}-
            Library-
      
      - name: Game builder 🌀
        uses: game-ci/unity-builder@v2
        with:
          allowDirtyBuild: true
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: Android
          buildMethod: UnityBuilderAction.GithubBuildScript.Build
      
      - name: Archive artifact 💼
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          path: build
          filename: android.zip

      - name: Copy artifact to S3 🚚
        uses: hkusu/s3-upload-action@v2
        id: upload # specify some ID for use in subsequent steps
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-southeast-1'
          aws-bucket: ${{ secrets.AWS_BUCKET }}
          destination-dir: ${{ env.REPO_NAME }}/${{ github.run_id }}
          file-path: android.zip
          output-file-url: 'true'
        
      - name: Show URL 📌
        id: result
        run: |
          echo "::set-output name=artifact_name::android.zip"
          echo "::set-output name=artifact_size::$(stat -c %s android.zip | numfmt --to=iec)"
          echo "::set-output name=artifact_url::${{ env.AWS_ENDPOINT_CDN }}/artifacts/${{ env.REPO_NAME }}/${{ github.run_id }}/android.zip"
          echo "${{ env.AWS_ENDPOINT_CDN }}/artifacts/${{ env.REPO_NAME }}/${{ github.run_id }}/android.zip"

      - name: Notify to discord 🐔
        run: |
          bash .github/scripts/discord_notify.sh "${{ github.job }}" "${{ steps.upload.outputs.result }}" "${{ steps.result.outputs.artifact_name }}" ${{ steps.result.outputs.artifact_size }} "${{ steps.result.outputs.artifact_url }}"

  build_android_bundle:
    runs-on: ubuntu-latest
    needs: [check_unity_license]
    if: ${{ (needs.check_unity_license.outputs.is_unity_license_set == 'true') && ((github.ref_name == 'master') || (github.ref_name == 'main')) }}
    name: Build for Android Bundle 🚀
    steps:
      - name: Code repo check out 📁
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: true

      - name: Cache ✨
        uses: actions/cache@v3
        with:
          path: ./Library
          key: Library-${{ env.REPO_NAME }}-iOS
          restore-keys: |
            Library-${{ env.REPO_NAME }}-
            Library-

      - name: Get keystore 🔐
        id: keystore
        run: |
          base64Data=$(wget ${{ env.ANDROID_KEYSTORE_LINK }} -q -O - | base64)}}
          echo "::set-output name=keystore_data64::base64Data"

      - name: Game builder 🌀
        uses: game-ci/unity-builder@v2
        with:
          allowDirtyBuild: true
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: Android
          androidAppBundle: true
          #androidKeystoreName: 'keystore.keystore'
          androidKeystoreBase64: ${{ steps.keystore.outputs.keystore_data64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
          buildMethod: UnityBuilderAction.GithubBuildScript.Build
          customParameters: -androidAppBundle true

      - name: Archive artifact 💼
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          path: build
          filename: android_bundle.zip

      - name: Copy artifact to S3 🚚
        uses: hkusu/s3-upload-action@v2
        id: upload # specify some ID for use in subsequent steps
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-southeast-1'
          aws-bucket: ${{ secrets.AWS_BUCKET }}
          destination-dir: ${{ env.REPO_NAME }}/${{ github.run_id }}
          file-path: android_bundle.zip
          output-file-url: 'true'
        
      - name: Show URL 📌
        id: result
        run: |
          echo "::set-output name=artifact_name::android_bundle.zip"
          echo "::set-output name=artifact_size::$(stat -c %s android_bundle.zip | numfmt --to=iec)"
          echo "::set-output name=artifact_url::${{ env.AWS_ENDPOINT_CDN }}/artifacts/${{ env.REPO_NAME }}/${{ github.run_id }}/android_bundle.zip"
          echo "${{ env.AWS_ENDPOINT_CDN }}/artifacts/${{ env.REPO_NAME }}/${{ github.run_id }}/android_bundle.zip"

      - name: Notify to discord 🐔
        run: |
          bash .github/scripts/discord_notify.sh "${{ github.job }}" "${{ steps.upload.outputs.result }}" "${{ steps.result.outputs.artifact_name }}" ${{ steps.result.outputs.artifact_size }} "${{ steps.result.outputs.artifact_url }}"

  build_ios:
    runs-on: self-hosted
    needs: [check_unity_license]
#    if: needs.check_unity_license.outputs.is_unity_license_set == 'true'
    if: 'false'
    name: Build for iOS 🚀
    outputs:
      artifact_name: ios.zip
      artifact_size: ${{ steps.upload.outputs.artifact_size }}
      artifact_url:  ${{ steps.upload.outputs.artifact_url }}

    steps:
      - name: Code repo check out 📁
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: true

      - name: Cache ✨
        uses: actions/cache@v3
        with:
          path: ./Library
          key: Library-${{ env.REPO_NAME }}-iOS
          restore-keys: |
            Library-${{ env.REPO_NAME }}-
            Library-

      - name: Game builder 🌀
        uses: game-ci/unity-builder@v2
        with:
          allowDirtyBuild: true
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: iOS

      - name: Archive artifact 💼
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          path: build
          filename: ios.zip

      - name: Copy artifact to S3 🚚
        uses: hkusu/s3-upload-action@v2
        id: upload # specify some ID for use in subsequent steps
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-southeast-1'
          aws-bucket: ${{ secrets.AWS_BUCKET }}
          destination-dir: ${{ env.REPO_NAME }}/${{ github.run_id }}
          file-path: ios.zip
          output-file-url: 'true'
        
      - name: Show URL 📌
        id: result
        run: |
          echo "::set-output name=artifact_name::ios.zip"
          echo "::set-output name=artifact_size::$(stat -c %s ios.zip | numfmt --to=iec)"
          echo "::set-output name=artifact_url::${{ env.AWS_ENDPOINT_CDN }}/artifacts/${{ env.REPO_NAME }}/${{ github.run_id }}/ios.zip"
          echo "${{ env.AWS_ENDPOINT_CDN }}/artifacts/${{ env.REPO_NAME }}/${{ github.run_id }}/ios.zip"

      - name: Notify to discord 🐔
        run: |
          bash .github/scripts/discord_notify.sh "${{ github.job }}" "${{ steps.upload.outputs.result }}" "${{ steps.result.outputs.artifact_name }}" ${{ steps.result.outputs.artifact_size }} "${{ steps.result.outputs.artifact_url }}"
